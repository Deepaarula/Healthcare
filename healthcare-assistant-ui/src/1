import { useState } from "react";

const SectionCard = ({
  emoji,
  title,
  subtitle,
  onClick,
}: {
  emoji: string;
  title: string;
  subtitle: string;
  onClick: () => void;
}) => (
  <div className="card" onClick={onClick}>
    <div className="emoji">{emoji}</div>
    <h2>{title}</h2>
    <p>{subtitle}</p>
  </div>
);

export default function App() {
  const [mode, setMode] = useState<null | string>(null);
  const [input, setInput] = useState("");
  const [result, setResult] = useState<any>(null);
  const [loading, setLoading] = useState(false);

  async function handleSubmit() {
    setLoading(true);
    try {
      const res = await fetch("http://localhost:8080/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt: input }),
      });
      const data = await res.json();
      setResult(data);
    } catch (err) {
      console.error(err);
    }
    setLoading(false);
  }

  if (!mode) {
    return (
      <div className="app-background">
        <div className="relative z-10">
          <header>
            <div className="powered">
              Powered by Google Cloud ‚Ä¢ Gemini ‚Ä¢ Vertex AI ‚Ä¢ BigQuery
            </div>
          </header>

          <main className="landing">
            <h1 className="title">üöÄ Geminator Testcase Generator (GTG)</h1>
            <p>
              Select a domain below to chat with{" "}
              <span className="highlight">MediAI</span>, generate compliant test
              cases, validate against ISO, and track execution.
            </p>

            <div className="cards">
              <SectionCard
                emoji="üíâ"
                title="Insulin Pumps"
                subtitle="Basal/bolus delivery, safety interlocks"
                onClick={() => setMode("Insulin Pumps")}
              />
              <SectionCard
                emoji="ü´Å"
                title="Ventilators"
                subtitle="Alarms, modes, fail-safes"
                onClick={() => setMode("Ventilators")}
              />
              <SectionCard
                emoji="ü´Ä"
                title="Cardiology Devices"
                subtitle="ECG/HR monitoring & diagnostics"
                onClick={() => setMode("Cardiology Devices")}
              />
              <SectionCard
                emoji="üè•"
                title="EHR/Clinical Software"
                subtitle="Security, audit trails, interoperability"
                onClick={() => setMode("EHR/Clinical Software")}
              />
              <SectionCard
                emoji="‚ö†Ô∏è"
                title="ISO/Regulatory Audit"
                subtitle="62304, 14971, CSV, 13485"
                onClick={() => setMode("ISO/Regulatory Audit")}
              />
              <SectionCard
                emoji="üß™"
                title="Sandbox / Samples"
                subtitle="Try with realistic sample data"
                onClick={() => setMode("Sandbox")}
              />
            </div>
          </main>
        </div>
      </div>
    );
  }

  return (
    <div className="app-background">
      <div className="chat-panel relative z-10">
        <button onClick={() => setMode(null)}>‚Üê Back</button>
        <h2>{mode} Assistant</h2>

        {/* Requirement input */}
        <textarea
          placeholder="Hey üëã I‚Äôm here for both brains & health,Wanna spin up a test case or just chat health stuff?"
          value={input}
          onChange={(e) => setInput(e.target.value)}
        />

        <button onClick={handleSubmit} disabled={loading}>
          {loading ? "‚è≥ Generating..." : "Scan Me"}
        </button>

        {/* Results */}
        {loading && <p>Processing...</p>}
        {result && (
          <div className="results">
            <h3>Requirement</h3>
            <pre>{JSON.stringify(result.requirement, null, 2)}</pre>

            <h3>Test Cases</h3>
            {result.test_cases?.map((tc: any) => (
              <div key={tc.test_case_id} className="test-case">
                <strong>{tc.title}</strong>
                <p>{tc.expected_result}</p>
                <button>‚úî Mark as Passed</button>
              </div>
            ))}

            <h3>ISO Validation</h3>
            <pre>{JSON.stringify(result.iso_validation, null, 2)}</pre>
          </div>
        )}
      </div>
    </div>
  );
}

